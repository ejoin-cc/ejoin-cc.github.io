import{_ as s,c as a,a as e,o as t}from"./app-DN92ejy5.js";const p="/assets/nginx_01-jnXYIm6R.png",i="/assets/nginx_02-D8FEvR4q.png",l="/assets/nginx_03-CMFLFTjt.png",o={};function c(r,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="nginx" tabindex="-1"><a class="header-anchor" href="#nginx"><span>Nginx</span></a></h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>配置了域名 DNS 后，我们可以使用域名访问到我们的服务器上。一般情况下，我们的服务器都部署了多个服务，我们希望使用不同的二级域名访问不同的服务。但 DNS 解析默认访问的端口是 80/443，而多个服务如果使用同一个端口会冲突，此时我们可以使用反向代理。</p><p>我们首先将不同的服务部署在不同的端口上，通过反向代理将不同的二级域名转发到不同的端口上，就可以满足我们的要求。</p><p>Cloudflare Tunnel 支持这种配置，但一般的请求会被解析到 Cloudflare 再通过 Tunnel 转发，可能影响访问速度。所以这里使用本地部署 Nginx 来进行 HTTP/HTTPS 的反向代理。</p><p>Nginx 是一种反向代理应用，也支持这样的配置方式，它可以完成各种复杂的操作。我们在服务器上使用 <a href="https://nginxproxymanager.com/" target="_blank" rel="noopener noreferrer">Nginx Proxy Manager</a>（下面简称 NPM）来简化 Nginx 的安装配置流程，它还可以自动申请 SSL 证书，十分简便。</p><h2 id="部署-npm" tabindex="-1"><a class="header-anchor" href="#部署-npm"><span>部署 NPM</span></a></h2><p>在目录下创建编辑 docker-compose.yml 文件：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">services</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">nginx</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">&#39;jc21/nginx-proxy-manager:latest&#39;</span></span>
<span class="line">    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> nginx</span>
<span class="line">    <span class="token key atrule">restart</span><span class="token punctuation">:</span> unless<span class="token punctuation">-</span>stopped</span>
<span class="line">    <span class="token key atrule">ports</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token datetime number">80:80</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token datetime number">81:81</span></span>
<span class="line">      <span class="token punctuation">-</span> 443<span class="token punctuation">:</span><span class="token number">443</span></span>
<span class="line">    <span class="token key atrule">volumes</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> ./data<span class="token punctuation">:</span>/data</span>
<span class="line">      <span class="token punctuation">-</span> ./letsencrypt<span class="token punctuation">:</span>/etc/letsencrypt</span>
<span class="line">    <span class="token key atrule">network_mode</span><span class="token punctuation">:</span> host</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样为了方便，直接使用 host 模式，ports 无意义，仅标记 NPM 使用的接口，NPM 使用 81 作为管理页面的端口，80 和 443 用于代理 HTTP/HTTPS 流量。</p><p>执行 docker-compose up -d 启动服务，执行完成后，在内网浏览器打开 <code>http://[内网 IP]:81</code>，开始进行配置。</p><h2 id="配置-npm" tabindex="-1"><a class="header-anchor" href="#配置-npm"><span>配置 NPM</span></a></h2><p>进入配置页面后先使用默认的 Email: <code>admin@example.com</code> 和 Password: <code>changeme</code> 进行登录。登录完毕后修改账号和密码。</p><p>下面我们配置 DDNS 和 NPM 的管理页面使其可以通过 HTTPS 域名进行访问。</p><p>首先我们来创建 SSL 证书。点击最上方的「SSL Certificates」，右侧「Add SSL Certificate」，可以使用「Let&#39;s Encrypt」提供的功能。</p><div align="center"><img width="500" src="`+p+'"></div><p>「Domain Names」中可以配置多个域名，也可以使用通配符。和 DDNS 类似，需要在 Cloudflare 中创建 <a href="https://dash.cloudflare.com/profile/api-tokens" target="_blank" rel="noopener noreferrer">API 令牌</a>，填写到等于号的后面。稍等片刻可以看到创建成功。</p><p>然后点击 Proxy Hosts，右上角新建一个新的配置，填写本地地址和 DDNS 管理页面的端口。</p><div align="center"><img width="500" src="'+i+'"></div><p>在「SSL」中选择刚刚申请的通配 SSL 证书，打开强制 SSL 的开关。</p><div align="center"><img width="500" src="'+l+'"></div><p>保存后可以看到这条反向代理配置，可以通过域名访问到 DDNS 管理页面进行配置。如果此时访问不到可以检查防火墙配置是否放行了 80/443 端口。</p><p>NPM 配置页面的反向代理配置类似，只需要把页面中转发到的端口改为 81 端口，设置想要的二级域名即可。</p>',23)]))}const u=s(o,[["render",c],["__file","nginx.html.vue"]]),m=JSON.parse('{"path":"/self_host/nginx.html","title":"Nginx","lang":"zh-CN","frontmatter":{"title":"Nginx","description":"Nginx 前言 配置了域名 DNS 后，我们可以使用域名访问到我们的服务器上。一般情况下，我们的服务器都部署了多个服务，我们希望使用不同的二级域名访问不同的服务。但 DNS 解析默认访问的端口是 80/443，而多个服务如果使用同一个端口会冲突，此时我们可以使用反向代理。 我们首先将不同的服务部署在不同的端口上，通过反向代理将不同的二级域名转发到不同...","head":[["meta",{"property":"og:url","content":"https://coding.ejoin.cc/self_host/nginx.html"}],["meta",{"property":"og:site_name","content":"Coding 练级宝典"}],["meta",{"property":"og:title","content":"Nginx"}],["meta",{"property":"og:description","content":"Nginx 前言 配置了域名 DNS 后，我们可以使用域名访问到我们的服务器上。一般情况下，我们的服务器都部署了多个服务，我们希望使用不同的二级域名访问不同的服务。但 DNS 解析默认访问的端口是 80/443，而多个服务如果使用同一个端口会冲突，此时我们可以使用反向代理。 我们首先将不同的服务部署在不同的端口上，通过反向代理将不同的二级域名转发到不同..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-01T15:44:37.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-01T15:44:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Nginx\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-01T15:44:37.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"部署 NPM","slug":"部署-npm","link":"#部署-npm","children":[]},{"level":2,"title":"配置 NPM","slug":"配置-npm","link":"#配置-npm","children":[]}],"git":{"updatedTime":1738424677000},"autoDesc":true,"filePathRelative":"self_host/nginx.md"}');export{u as comp,m as data};
